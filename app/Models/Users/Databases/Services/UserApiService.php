<?php

/**
 * @Author: Roy
 * @DateTime: 2022/6/21 上午 11:25
 */

namespace App\Models\Users\Databases\Services;

use App\Concerns\Databases\Service;
use Illuminate\Database\Eloquent\Model;
use App\Models\Users\Databases\Entities\UserEntity;
use Illuminate\Support\Facades\Cache;
use Illuminate\Support\Facades\Crypt;
use Firebase\JWT\JWT;

class UserApiService extends Service
{
    /**
     * @return \Illuminate\Database\Eloquent\Model
     * @Author: Roy
     * @DateTime: 2022/6/21 上午 11:27
     */
    protected function getEntity(): Model
    {
        // TODO: Implement getEntity() method.
        if (app()->has(UserEntity::class) === false) {
            app()->singleton(UserEntity::class);
        }

        return app(UserEntity::class);
    }

    /**
     * @param  array  $create
     *
     * @return \Illuminate\Database\Eloquent\Model
     * @Author: Roy
     * @DateTime: 2022/6/21 上午 11:27
     */
    public function create(array $create): Model
    {
        return parent::create($create); // TODO: Change the autogenerated stub
    }

    public function find($id)
    {
        $cacheKey = 'user.' . $id;
        if (Cache::get($cacheKey)) {
            return Cache::get($cacheKey);
        }
        $user = $this->getEntity()
            ->with([
                'wallet_users' => function ($query) {
                    $query->select('id', 'user_id', 'wallet_id');
                },
            ])
            ->find($id);
        if ($user) {
            Cache::put($cacheKey, $user, 3600);
        }

        return $user;
    }

    public function forgetFindCache($id)
    {
        $cacheKey = 'user.' . $id;
        Cache::forget($cacheKey);
    }

    public function getUserById(int $id)
    {
        $user = $this->getEntity()->find($id);
        $user->jwt = $this->getJwtByUser($user);

        return $user;
    }

    public function getUserJwtById(int $id)
    {
        $user = $this->getEntity()->find($id);
        if ($user) {
            return $this->getJwtByUser($user);
        }

        return null;
    }

    public function getJwtByUser($user)
    {
        $key = config('app.name');
        $payload = [
            'iss' => config('app.url'),
            'aud' => 'https://easysplit.usongrat.tw',
            'iat' => now()->timestamp,
            'exp' => now()->addYear()->timestamp,
            'nbf' => now()->timestamp,
            'user' => [
                'id' => $user->id,
                'account' => $user->account,
                'name' => $user->name,
                'created_at' => $user->created_at,
                'updated_at' => $user->updated_at,
            ],
        ];

        return JWT::encode($payload, $key, 'HS256');
    }
}
